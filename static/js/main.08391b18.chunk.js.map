{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","this","props","countGood","countNeutral","countBad","total","positivePercentage","React","Component","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","shortid","generate","Notification","Feedback","state","good","initialValue","neutral","bad","countTotalFeedback","evt","target","setState","prevState","countPositiveFeedbackPercentage","Math","round","objKey","Object","keys","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAIaA,EAAb,4JACE,WACE,MACEC,KAAKC,MADCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aAAcC,EAAjC,EAAiCA,SAAUC,EAA3C,EAA2CA,MAAOC,EAAlD,EAAkDA,mBAElD,OACE,qCACE,2CACA,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,iBAZV,GAAgCC,IAAMC,W,iBCevBC,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJX,SAMGE,GALII,IAAQC,kBCFNC,EAJM,WACnB,OAAO,mDCGHC,E,4MAKJC,MAAQ,CACNC,KAAM,EAAKrB,MAAMsB,aACjBC,QAAS,EAAKvB,MAAMsB,aACpBE,IAAK,EAAKxB,MAAMsB,c,EAGlBG,mBAAqB,WACnB,MAA+B,EAAKL,MACpC,OADA,EAAQC,KAAR,EAAcE,QAAd,EAAuBC,K,EAIzBd,gBAAkB,SAAAgB,GAChB,IAAMZ,EAAOY,EAAIC,OAAOb,KACxB,EAAKc,UAAS,SAAAC,GAAS,sBACpBf,EAAOe,EAAUf,GAAQ,O,EAI9BgB,gCAAkC,WAChC,MAA+B,EAAKV,MAA5BC,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAEvB,OAAOO,KAAKC,MAAc,IAAPX,GAAeA,EAAOE,EAAUC,KAAS,G,4CAG9D,WACE,MAA+BzB,KAAKqB,MAA5BC,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBS,EAASC,OAAOC,KAAKpC,KAAKqB,OAChC,OACE,gCACE,sDAEA,cAAC,EAAD,CACEX,QAASwB,EACTvB,gBAAiBX,KAAKW,kBAEO,IAA9BX,KAAK0B,qBACJ,cAAC,EAAD,IAEA,cAAC,EAAD,CACExB,UAAWoB,EACXnB,aAAcqB,EACdpB,SAAUqB,EACVpB,MAAOL,KAAK0B,qBACZpB,mBAAoBN,KAAK+B,2C,GAhDdxB,IAAMC,WAAvBY,EACGiB,aAAe,CACpBd,aAAc,GAsDHH,QCnDAkB,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.08391b18.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Statistics extends React.Component {\r\n  render() {\r\n    const { countGood, countNeutral, countBad, total, positivePercentage } =\r\n      this.props;\r\n    return (\r\n      <>\r\n        <p>Statistics</p>\r\n        <ul>\r\n          <li>Good:{countGood}</li>\r\n          <li>Neutral:{countNeutral}</li>\r\n          <li>Bad:{countBad}</li>\r\n          <li>Total:{total}</li>\r\n          <li>Positive feedback:{positivePercentage}%</li>\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nStatistics.propTypes = {\r\n  countGood: PropTypes.number.isRequired,\r\n  countNeutral: PropTypes.number.isRequired,\r\n  countBad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  //   total: PropTypes.func.isRequired,\r\n  //   PositiveFeedback: PropTypes.func.isRequired,\r\n  PositiveFeedback: PropTypes.func,\r\n};\r\n","import React from 'react';\r\n// import PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n  <>\r\n    {options.map(option => (\r\n      <button\r\n        key={shortid.generate()}\r\n        type=\"button\"\r\n        name={option}\r\n        onClick={onLeaveFeedback}\r\n      >\r\n        {option}\r\n      </button>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\n\r\nconst Notification = () => {\r\n  return <p>No feedback given</p>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\n\r\nimport { Statistics } from '../Statistics/Statistics';\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Notification from '../Notification/Notification';\r\n\r\nclass Feedback extends React.Component {\r\n  static defaultProps = {\r\n    initialValue: 0,\r\n  };\r\n\r\n  state = {\r\n    good: this.props.initialValue,\r\n    neutral: this.props.initialValue,\r\n    bad: this.props.initialValue,\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return good + neutral + bad;\r\n  };\r\n\r\n  onLeaveFeedback = evt => {\r\n    const name = evt.target.name;\r\n    this.setState(prevState => ({\r\n      [name]: prevState[name] + 1,\r\n    }));\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const { good, neutral, bad } = this.state;\r\n\r\n    return Math.round((good * 100) / (good + neutral + bad)) || 0;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const objKey = Object.keys(this.state);\r\n    return (\r\n      <div>\r\n        <p>Please leave feedback</p>\r\n\r\n        <FeedbackOptions\r\n          options={objKey}\r\n          onLeaveFeedback={this.onLeaveFeedback}\r\n        />\r\n        {this.countTotalFeedback() === 0 ? (\r\n          <Notification />\r\n        ) : (\r\n          <Statistics\r\n            countGood={good}\r\n            countNeutral={neutral}\r\n            countBad={bad}\r\n            total={this.countTotalFeedback()}\r\n            positivePercentage={this.countPositiveFeedbackPercentage()}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import './App.css';\nimport Feedback from './components/Feedback/Feedback';\n\nfunction App() {\n  return (\n    <>\n      <Feedback />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}